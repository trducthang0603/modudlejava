/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.25
 * Generated at: 2024-09-06 06:41:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.templates;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>WebSocket Test</title>\r\n");
      out.write("    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.4.0/sockjs.min.js\"></script>\r\n");
      out.write("    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("        var stompClient = null;\r\n");
      out.write("\r\n");
      out.write("        function setConnected(connected) {\r\n");
      out.write("            document.getElementById('connect').disabled = connected;\r\n");
      out.write("            document.getElementById('disconnect').disabled = !connected;\r\n");
      out.write("            document.getElementById('conversationDiv').style.visibility = connected ? 'visible' : 'hidden';\r\n");
      out.write("            document.getElementById('response').innerHTML = '';\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function connect() {\r\n");
      out.write("            var socket = new SockJS('/gs-guide-websocket');\r\n");
      out.write("            stompClient = Stomp.over(socket);\r\n");
      out.write("            stompClient.connect({}, function (frame) {\r\n");
      out.write("                setConnected(true);\r\n");
      out.write("                console.log('Connected: ' + frame);\r\n");
      out.write("                stompClient.subscribe('/topic/greetings', function (greeting) {\r\n");
      out.write("                    showGreeting(JSON.parse(greeting.body).content);\r\n");
      out.write("                });\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function disconnect() {\r\n");
      out.write("            if (stompClient !== null) {\r\n");
      out.write("                stompClient.disconnect();\r\n");
      out.write("            }\r\n");
      out.write("            setConnected(false);\r\n");
      out.write("            console.log(\"Disconnected\");\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function sendName() {\r\n");
      out.write("            var name = document.getElementById('name').value;\r\n");
      out.write("            stompClient.send(\"/app/hello\", {}, JSON.stringify({'name': name}));\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function showGreeting(message) {\r\n");
      out.write("            var response = document.getElementById('response');\r\n");
      out.write("            var p = document.createElement('p');\r\n");
      out.write("            p.appendChild(document.createTextNode(message));\r\n");
      out.write("            response.appendChild(p);\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div>\r\n");
      out.write("        <button id=\"connect\" onclick=\"connect();\">Connect</button>\r\n");
      out.write("        <button id=\"disconnect\" onclick=\"disconnect();\" disabled=\"disabled\">Disconnect</button>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div id=\"conversationDiv\">\r\n");
      out.write("        <input type=\"text\" id=\"name\" />\r\n");
      out.write("        <button onclick=\"sendName();\">Send</button>\r\n");
      out.write("        <p id=\"response\"></p>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
